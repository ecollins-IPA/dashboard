---
title: "Dashboard: Social and political correlates of Covid-19"
author: "WZB | Institutions and Political Inequality Group, `r format(Sys.time(), '%d %B, %Y')`"
output: 
  html_document:
    code_folding: "hide"
---

```{r setup, include=FALSE}
dographs <- TRUE

knitr::opts_chunk$set(echo = TRUE)

check.packages <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg))
    install.packages(new.pkg, dependencies = TRUE,
                     repos = "https://cran.rstudio.com")
  sapply(pkg, require, character.only = TRUE)
}

pkgList <- c("RCurl","WDI","readxl","httr","knitr","tidyverse", "pscl",
             "estimatr","stargazer","countrycode","dataverse",
             "zip", "lubridate", "rvest", "fastDummies", "lfe",
             "directlabels")
check.packages(pkgList)

df <- read.csv("saved/df.csv")
df_full <- read.csv("docs/df_full.csv")
data_date <- max(as.Date(df$DateRep), na.rm = TRUE)

measures <- 
  read.csv("measures.csv") %>% 
  filter(include == 1)

# controls <- measures[measures$family=="controls", ]$vars %>% as.character
# controls_labels <- measures[measures$family=="controls", ]$labels %>% as.character

## Load all Lasso results 
n_controls <- 4

lasso_res <- read_rds("saved/lasso_res.rds")

lasso_1 <- lasso_res$lcoef_controls %>% filter(outcome == "deaths_cumul_log" & abs(coef)>0) %>% 
  filter(!duplicated(vars)) %>% filter(rank(-abs(coef))<=n_controls) 

controls <- lasso_1$vars
controls_labels <- lasso_1$labels

## Controls for deaths/capita

lasso_2 <- lasso_res$lcoef_controls %>% filter(outcome == "deaths_cumul_per_million_log" & abs(coef)>0) %>%
  filter(!duplicated(vars)) %>% filter(rank(-abs(coef))<=n_controls) 

controls_deaths_capita <- lasso_2$vars
controls_deaths_capita_labels <- lasso_2$labels

```


```{r functions, warning = FALSE, message = FALSE}

major_missing_because_of_controls <- 
  filter(df, !complete.cases(select(df, all_of(controls)))) %>% filter(poptot>1 & !is.na(countriesAndTerritories) & countriesAndTerritories != "NA")

dropped <- major_missing_because_of_controls$countriesAndTerritories %>% as.character %>% unique 

major_missing_because_of_controls_pc <- 
  filter(df, !complete.cases(select(df, all_of(controls_deaths_capita)))) %>% filter(poptot>1 & !is.na(countriesAndTerritories) & countriesAndTerritories != "NA")

dropped_pc <- major_missing_because_of_controls_pc$countriesAndTerritories %>% as.character %>% unique 

results <- function(Y, 
                    X = vars, 
                    Xlab = NA,
                    XX = controls,
                    range = NULL, 
                    data = filter(df, GeoId2 != "CN"), 
                    bivariate = FALSE, 
                    relative_dates = FALSE,
                    standardize = FALSE, 
                    drop_missing_c = TRUE,
                    model = "lm",
                    dayfreq = 3){

  if(drop_missing_c) data <- 
        filter(data, complete.cases(select(data, all_of(XX))))

  if(!relative_dates)  
    data$points <- data$elapsed
  
  if(relative_dates) {
    data$points <- data$elapsed_rel
    data <- filter(data, elapsed_rel < max(data$elapsed, na.rm = TRUE) - 80)
    }

  if(is.null(range)) 
    range <- c(ifelse(relative_dates, 0, 60), max(data$points, na.rm = TRUE))
  
  ## If standardize
  if (standardize)
    data <- data %>% 
      mutate_at(vars(one_of(X)),
                list(~./sd(., na.rm = T)))

  out <-

    lapply(seq(range[1], range[2], dayfreq), function(j) {

      lapply(X, function(x) {
      
        ## Formula
        rhs <- ifelse(bivariate, x, paste(unique(c(x, XX)), collapse = " + "))

        if (model == "lm") {
      
          my_formula <- paste0(Y, " ~ ",  rhs)
          
          m <- lm_robust(as.formula(my_formula), 
                         data = filter(data, points == j))
          rsq <- m$r.squared
          n <- m$N
          
          ## partial RSQ
          
          if (!bivariate) {
            f_reduced <- paste0(Y, " ~ ",  paste0(setdiff(XX, x), collapse = '+')) %>% 
              as.formula()
            f_full <- my_formula %>% as.formula()
            
            m_reduced <- lm(f_reduced, data = filter(data[data$points == j & 
                                                            complete.cases(data[, unique(c(XX, x))]), ]))
            m_full <- lm(f_full, data = filter(data[data$points == j & 
                                                      complete.cases(data[, unique(c(XX, x))]), ]))
            
            ## Get partial rsq
            
            rsq <- (sum(m_reduced$residuals^2) - sum(m_full$residuals^2)) / sum(m_reduced$residuals^2)
            
            ## Adjust: Formula is 1-(1-R2)*(DF_Reduced / DF_Full)
            
            rsq <- 1-((1-rsq)*(summary(m_reduced)$df[2] / summary(m_full)$df[2]))
          }
          
          ## Return
          
          m %>% tidy() %>% slice(2) %>% 
            mutate(n = n, rsq = rsq)
          
        } else {
          
          ## Negative binomial model
          my_formula <- paste0(Y, " ~ ",  rhs, '|', rhs)
  
          model <- zeroinfl(formula = as.formula(my_formula), data = data, dist = "negbin")
          
          out <- 
            rbind(
            summary(model)$coefficients$count[2,],
            summary(model)$coefficients$zero[2,]) %>% 
            data.frame() 
          
          names(out) <- c("estimate", "std.error", "statistic", "p.value")
          
          out %>%
            mutate(
              term = paste0(X, c("_count", "_zero")),
              conf.high  = estimate + 1.96*std.error,
              conf.low  = estimate - 1.96*std.error,
              outcome = "Y",
              n = model$n
              )
        }
          
      }) %>%
        bind_rows()  %>%                     
        select(term, estimate, conf.low, conf.high, n, rsq) %>% 
        mutate(elapsed = j) 
      
    }) %>%
    
      bind_rows() %>%
      data.frame()
    
    ## If labels are desired recode the term variable
    
    if (!is.na(Xlab[1])) {
      tempdf <- data.frame(term = X, label = Xlab)
      out <- left_join(out, tempdf) %>% 
        mutate(term = label)
    }
  
  ## Return 
  
  out %>% 
    group_by(term) %>% 
    arrange(elapsed) %>% 
    mutate(n = last(n), rsq = last(rsq)) %>% 
    mutate(label_nrsq = paste0('N=', n, ', ', 'R2=', round(rsq, 2))) %>% 
    ungroup()
}


do_plots <- function(ests, xlab)
  ests %>% 
  transform(term=factor(term,levels=unique(term))) %>%
    ggplot(aes(x=elapsed, y=estimate)) + 
      geom_point() +
      geom_line() +
      geom_errorbar(aes(ymin=conf.low, ymax=conf.high), colour="black", width=.1) +
      xlab(xlab) +
      ylab("Coefficient") +
      theme_bw()  +
    theme(panel.grid.minor = element_blank()) +
  geom_abline(slope = 0, intercept =0, linetype = 'dashed', color = "black") +
      facet_wrap(~term + label_nrsq, scales = "free")

# Get measures and labels


families <- 
  c("state_cap_vars", "pol_account_vars", "social_vars", "econ_vars",  "phys_vars", "epi_vars", "health_sys_vars")

for(v in families){  
  assign(v, filter(measures, family == v)$vars %>% as.character) 
  assign(paste0(v, "_labels"), filter(measures, family == v)$labels %>% as.character)
 }

```


```{r, include = FALSE, eval = dographs, message = FALSE}
# Controls graphs, used in paper

pdf("figs/deaths_cumul_log_controls.pdf", width = 8, height = 6)
  Y              <- "deaths_cumul_log"
  relative_dates <- FALSE
  xlab           <- "Days since 1 Jan 2020"
  
  out <- results(Y = Y, X =  controls, Xlab = controls_labels,
          bivariate = FALSE, relative_dates = relative_dates)
   do_plots(out, xlab)
dev.off()


pdf("figs/deaths_cumul_log_controls_biv.pdf", width = 8, height = 6)
  Y              <- "deaths_cumul_log"
  relative_dates <- FALSE
  xlab           <- "Days since 1 Jan 2020"
  
  out <- results(Y = Y, X =  controls, Xlab = controls_labels,
          bivariate = TRUE, relative_dates = relative_dates)
   do_plots(out, xlab)
dev.off()
```

Existing social science research has implications for the kinds of features of  societies that might help explain variation in a society's ability to respond to adverse shocks. In some accounts, for example, more democratic societies will be more responsive; in other accounts, state capacity or social cohesion are more important. We gather together major measures suggested by these literatures and report on the evolving covariance between these measures and the cross national distribution of reported Covid-19 burdens. 

As of the most recent data date, `r format(data_date, '%d %B, %Y')`: 

```{r, echo = FALSE}
Mbase <- lm_robust(as.formula(paste("deaths_cumul_log ~ ", paste(controls, collapse = "+"))),
           	data = filter(df, as.Date(df$DateRep) == data_date))
```



* A small set of simple controls---population, age over 65, prevalence of respiratory diseases, health system quality---explain `r round(100*Mbase$r.squared, 0)`% of  the cross national variation in deaths (logged).
* Given these controls, most political and economic measures are (currently) not related with Covid-19 burdens in the directions suggested by prominent theories. For instance, wealthier, more democratic, and more prepared states currently suffer the greatest burdens. 

These patterns may change however as the pandemic evolves.

* See [this paper](https://wzb-ipi.github.io/corona/paper.pdf) for details and discussion as well as supplementary analysis on policy outcome measures.
* All data preparation code and sources available [here](https://wzb-ipi.github.io/corona/dataprep.html). And merged complete data [here](https://wzb-ipi.github.io/corona/df_full.csv).

**Notes / warnings**: 

* The covariances we report should **not be taken as estimates of causal effects** but rather as summaries of covariation between measures. 
* Cross national covariation can in part reflect **differences in reporting standards** and not just underlying variation in the disease. 
* Currently outcome data is highly **skewed**. Moreover the **scale** of the outcome is changing as the disease spreads which in itself can produce larger coefficient magnitudes over time.

#  {.tabset}


## Deaths total (logged)  {.tabset  .tabset-pills}

Correlates of total deaths recorded to date (logged), by day since 1 Jan 2020.

```{r}
Y              <- "deaths_cumul_log"
relative_dates <- FALSE
xlab           <- "Days since 1 Jan 2020"
```

```{r, child = "6_report_child.Rmd"}
```




## Deaths/million (logged) {.tabset  .tabset-pills}

Correlates of total deaths per million population (logged), by day since 1 Jan 2020.

```{r}
dographs <- FALSE
Y              <- "deaths_cumul_per_million_log"
relative_dates <- FALSE
xlab           <- "Days since 1 Jan 2020"
```

```{r, child = "6_report_child.Rmd"}
```


## Deaths  (since onset)  {.tabset  .tabset-pills}

Correlates of total deaths by day since country recoded at least 10 cases. Note that there are possible discontinuities in these graphs here as sample composition changes.  

```{r}
Y              <- "deaths_cumul_log"
relative_dates <- TRUE
xlab           <- "Days since first 10 cases"
```

```{r, child = "6_report_child.Rmd"}
```


<!-- ## Lockdowns  {.tabset  .tabset-pills} -->

<!-- Correlates of enactment of lockdown measures, by day since 1 Jan 2020. -->


<!-- ```{r} -->
<!-- Y              <- "lockdown_bin" -->
<!-- relative_dates <- FALSE -->
<!-- xlab           <- "Days since 1 Jan 2020" -->
<!-- ``` -->

<!-- ```{r, child = "6_report_child.Rmd"} -->
<!-- ``` -->


## Overview plots  {.tabset  .tabset-pills}

### Cumulative deaths

Cumulative deaths, selected countries:

```{r, warning = FALSE}

df_full %>% filter(GeoId2 %in% c("CHN", "KOR","ITA", "ESP", "USA", 
                            "GBR", "DEU", "CHE", "IRN", "IND") & elapsed_rel > -5)  %>%
  ggplot(aes(x=elapsed_rel, y=deaths_cumul, color = GeoId2)) + 
  geom_line() +
  xlab("Days since reported 10th case") +
  ylab("Deaths") +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  geom_dl(aes(label = GeoId2), method = list(dl.trans(x = x + .2), "last.points")) + 
  theme(legend.position = "none")
```

Cumulative deaths, countries with per capita income below $2000:

```{r, warning = FALSE}

df_full %>% filter(gdppc < 2 & elapsed_rel > -5)  %>%
  ggplot(aes(x=elapsed_rel, y=deaths_cumul, color = GeoId2)) + 
  geom_line() +
  xlab("Days since reported 10th case | Poorer countries (< USD 2 K)") +
  ylab("Deaths") +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  geom_dl(aes(label = GeoId2), method = list(dl.trans(x = x + .2), "last.points")) + 
  theme(legend.position = "none")
```


Cumulative deaths, selected countries

```{r, warning = FALSE}

df_full %>% filter(GeoId2 %in% c("CHN", "KOR","ITA", "ESP", "USA", 
                            "GBR", "DEU", "CHE", "IRN", "IND") & elapsed_rel > -5)  %>%
  ggplot(aes(x=elapsed_rel, y=deaths_cumul_log, color = GeoId2)) + 
  geom_line() +
  xlab("Days since 10th reported case") +
  ylab("Deaths (logged)")  +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  geom_dl(aes(label = GeoId2), method = list(dl.trans(x = x + .2), "last.points")) + 
  theme(legend.position = "none")
```


Cumulative deaths per million population.

```{r, warning = FALSE}

df_full %>% filter(GeoId2 %in% c("CHN", "KOR","ITA", "ESP", "USA", 
                            "GBR", "DEU", "CHE", "IRN", "IND") & elapsed_rel > -5)  %>%
  ggplot(aes(x=elapsed_rel, y=deaths_cumul_per_million_log, color = GeoId2)) + 
  geom_line() +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  xlab("Days since 10th reported case") +
  ylab("Deaths per million") +
  geom_dl(aes(label = GeoId2), method = list(dl.trans(x = x + .2), "last.points")) + 
  theme(legend.position = "none")
```


```{r, echo = FALSE, warning = FALSE}

df_reg <- df_full  %>% 
  group_by(region, elapsed) %>% summarize(region_deaths_cuml = sum(deaths_cumul, na.rm = TRUE)) %>%
  group_by(forcats::fct_explicit_na(region)) %>%
  mutate(relative_start = ifelse(any(region_deaths_cuml >= 1),  min(elapsed[region_deaths_cuml >= 1]), NA),
         elapsed_rel = elapsed - relative_start) %>%
  ungroup() %>%
filter(elapsed_rel > -1 & !is.na(region))  

df_reg %>%
  ggplot(aes(x=elapsed_rel, y=region_deaths_cuml + 1, color = region)) + 
  geom_line() +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  xlab("Days since 1st death") +
  ylab("Cumulative deaths") +
  geom_dl(aes(label = region), method = list(dl.trans(x = x + .2), "last.points")) + 
  theme(legend.position = "none")+
  scale_y_continuous(trans='log10') + xlim(0, max(df_reg$elapsed_rel, na.rm=TRUE) + 10)


```

### Total deaths

```{r, fig.cap="Distribution of deaths (Wealthier and less wealthy countries)", echo = FALSE, fig.width = 10, warning = FALSE}

df_full %>% filter(as.Date(df_full$DateRep) == data_date & deaths_cumul > 10) %>%
  mutate(group = if_else(gdppc > median(gdppc, na.rm = TRUE), 
                              paste0("GDP/capita > ",
                                     paste0(round(1000*round(median(gdppc, na.rm = TRUE)), 0),
                                            " USD PPP")), 
                              paste0("GDP/capita < ",
                                     paste0(round(1000*round(median(gdppc, na.rm = TRUE)), 0),
                                            " USD PPP")))) %>% 
  filter(!is.na(group)) %>%
  mutate(countriesAndTerritories = str_replace_all(countriesAndTerritories, 
                                                   "_", " ")) %>% 
  ggplot(aes(x = reorder(countriesAndTerritories, 
                         deaths_cumul_log), 
             y = deaths_cumul)) +   
  geom_bar(stat = "identity") +
  labs(x = "Country", 
       y = "Total deaths (log scale)") +
  theme_bw() +
    theme(panel.grid.minor = element_blank()) +
  facet_wrap(group ~ ., scales = "free_y", ncol = 2) +
  scale_y_continuous(trans='log10') +
  coord_flip()

```


```{r, fig.cap="Distribution of deaths (regions)", echo = FALSE, fig.width = 10, fig.height = 20, warning = FALSE}

df_full %>% filter(as.Date(df_full$DateRep) == data_date & deaths_cumul > 1) %>%
  filter(!is.na(region)) %>%
  mutate(countriesAndTerritories = str_replace_all(countriesAndTerritories, 
                                                   "_", " ")) %>% 
  ggplot(aes(x = reorder(countriesAndTerritories, 
                         deaths_cumul_log), 
             y = deaths_cumul)) +   
  geom_bar(stat = "identity") +
  labs(x = "Country", 
       y = "Total deaths (log scale)") +
  theme_bw() +
    theme(panel.grid.minor = element_blank()) +
  facet_wrap(region ~ ., scales = "free_y", ncol = 2) +
  scale_y_continuous(trans='log10') +
  coord_flip()

```

### Growth rates deaths

3 day deaths growth rates, selected countries

```{r, warning = FALSE}

df_full %>% filter(GeoId2 %in% c("CHN", "KOR", "ITA", "ESP", 
                            "USA", "GBR", "DEU", "IRN") & elapsed_rel_d > 10)  %>%
  ggplot(aes(x=elapsed_rel_d, y=100*deaths_cumul_g3, color = GeoId2)) + 
  geom_line() +
  xlab("Days since 10th Death") +
  ylab("3 day growth in Deaths (percent; 100 = doubling)") +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  geom_dl(aes(label = GeoId2), method = list(dl.trans(x = x + .2), "last.points")) + 
  theme(legend.position = "none")
```


<!-- ### Death and lagged cases  -->

<!-- Relation between deaths and previously reported cases  (1, 7 and 14 days prior). -->

<!-- ```{r, fig.height=12, fig.width=9, warning = FALSE}   -->
<!-- j <- c("IRN", "CHN", "GBR", "KOR", "USA", "ITA", "ESP", "DEU", "TUR")  -->

<!-- df_full %>% filter((GeoId2 %in% j) & (elapsed_rel >=0))  %>% -->
<!--   ggplot(aes(elapsed_rel)) +  -->
<!--   geom_line(aes(y = deaths_cumul +1, colour = "deaths_cumul")) +  -->
<!--   geom_line(aes(y = cases_cumul_L14 +1, colour = "cases_cumul_L14")) + -->
<!--   geom_line(aes(y = cases_cumul_L7 +1, colour = "cases_cumul_L7")) + -->
<!--   geom_line(aes(y = cases_cumul_L1 +1, colour = "cases_cumul_L1")) + -->
<!--   facet_wrap(~ GeoId2, scales = "free")+ -->
<!--   scale_y_continuous(trans='log10') + -->
<!--   xlab("Days since 10th case") + -->
<!--   theme_bw() + -->
<!--   theme(panel.grid.minor = element_blank()) + -->
<!--   ylab("Cumulative deaths + 1") -->

<!-- ``` -->



## Browse data  {.tabset  .tabset-pills}

```{r, echo  = FALSE}
library(DT)

data_date <- max(as.Date(df$DateRep), na.rm = TRUE)
df_display <- df_full %>% filter(as.Date(DateRep) == data_date) %>% 
  select(GeoId2, everything(), country,countriesAndTerritories) %>%
  select(-starts_with("X")) 
rownames(df_display) <- df_display$country
df_display %>% mutate_if(is.numeric, ~round(., 3)) %>%
datatable(caption = paste('Data for ', data_date), 
          rownames = TRUE, 
          extensions = c('Buttons', 'Scroller', 'ColReorder', 'FixedColumns'), 
          options = list(colreorder = TRUE, 
                         dom = 'Bfrtip',
                         buttons = c('copy', 'csv', 'excel'),
                         deferRender = TRUE,
                          scrollY = 200,
                          scroller = TRUE,
                         scrollX = TRUE
#,
#          fixedColumns = list(leftColumns = 1)
  )) 

```

